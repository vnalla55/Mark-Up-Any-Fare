#!/bin/bash

#-------------------------------------------------------------------------------
# { -- utils/utils.sh
function printinfo() {
  echo "$1" | tee -a "${SCRIPT_EXECUTION_LOG}"
}
# } -- utils/utils.sh
#-------------------------------------------------------------------------------
# { -- utils/collect-app-process-data.sh

function collect-app-process-data() {
# collect-app-process-data APP_NAME APP_PID

APPLICATION_NAME="$1"
APPLICATION_PID="$2"

APP_ID="${APPLICATION_NAME}-${APPLICATION_PID}"

mkdir -p ${OUTPUT_DIRECTORY}/${APP_ID}

if [ "${APPLICATION_PID}" != "" ]; then
  printinfo "${APP_ID}: Collecting application process data"
  
  printinfo "${APP_ID}: Process limits"
  cat /proc/${APPLICATION_PID}/limits >> ${OUTPUT_DIRECTORY}/${APP_ID}/application-limits.txt

  printinfo "${APP_ID}: Process command line"
  cat /proc/${APPLICATION_PID}/cmdline >> ${OUTPUT_DIRECTORY}/${APP_ID}/application-cmdline.txt

  printinfo "${APP_ID}: Process first pstack dump"
  pstack ${APPLICATION_PID} >> ${OUTPUT_DIRECTORY}/${APP_ID}/pstack-1-`date +${TIMESTAMP_FORMAT}`.txt
  
  printinfo "${APP_ID}: Waiting before the second pstack dump"
  sleep ${PSTACK_DUMP_INTERVAL}
  
  printinfo "${APP_ID}: Process second pstack dump"
  pstack ${APPLICATION_PID} >> ${OUTPUT_DIRECTORY}/${APP_ID}/pstack-2-`date +${TIMESTAMP_FORMAT}`.txt

else
  printinfo "${APPLICATION_NAME}: APPLICATION_PID not set. Skipping application process data"
fi
}

# } -- utils/collect-app-process-data.sh
#-------------------------------------------------------------------------------
# { -- utils/collect-java-app-process-data.sh

function collect-java-app-process-data() {
# collect-java-app-process-data APP_NAME APP_PID JAVA_HOME

APPLICATION_NAME="$1"
APPLICATION_PID="$2"
JAVA_HOME="$3"
APP_ID="${APPLICATION_NAME}-${APPLICATION_PID}"

mkdir -p ${OUTPUT_DIRECTORY}/${APP_ID}

# Java Application processes data
collect-app-process-data ${APPLICATION_NAME} ${APPLICATION_PID}

if [ ! -d ${JAVA_HOME} ]
then
  printinfo "${APP_ID}: WARNING: JAVA_HOME is not set. information about JVM won't be collected"
else
  printinfo "${APP_ID}: Collecting Java application data"

  printinfo "${APP_ID}: Application JVM parameters"
  ${JAVA_HOME}/bin/jinfo -flags ${APPLICATION_PID} >> ${OUTPUT_DIRECTORY}/${APP_ID}/jvm-parameters.txt

  printinfo "${APP_ID}: Application JVM system properties"
  ${JAVA_HOME}/bin/jinfo -sysprops ${APPLICATION_PID} >> ${OUTPUT_DIRECTORY}/${APP_ID}/jvm-system-properties.txt

  printinfo "${APP_ID}: First Java thread dump"
  ${JAVA_HOME}/bin/jstack -m ${APPLICATION_PID} 1>${OUTPUT_DIRECTORY}/${APP_ID}/jvm-thread-dump-1.out 2>&1 >> ${OUTPUT_DIRECTORY}/${APP_ID}/jvm-thread-dump-1-`date +${TIMESTAMP_FORMAT}`.txt

  printinfo "${APP_ID}: Waiting before the second thread dump"
  sleep ${THREAD_DUMP_INTERVAL}

  printinfo "${APP_ID}: Second Java thread dump"
  ${JAVA_HOME}/bin/jstack -m ${APPLICATION_PID} 1>${OUTPUT_DIRECTORY}/${APP_ID}/jvm-thread-dump-2.out 2>&1 >> ${OUTPUT_DIRECTORY}/${APP_ID}/jvm-thread-dump-2-`date +${TIMESTAMP_FORMAT}`.txt
fi
}

# } -- utils/collect-java-app-process-data.sh
#-------------------------------------------------------------------------------

export TIMESTAMP_FORMAT="%Y-%m-%d_%H%M%S"
TIMESTAMP="`date +${TIMESTAMP_FORMAT}`"
TIMESTAMPED_NAME=${HOSTNAME}-${TIMESTAMP}
THREAD_DUMP_INTERVAL=5
PSTACK_DUMP_INTERVAL=5
NETSTAT_OPEN_CONNECTIONS_INTERVAL=5

cd "$(dirname $0)"

#-------------------------------------------------------------------------------
# { -- config/configure-environment.sh
#!/bin/bash
THREAD_DUMP_INTERVAL=5
PSTACK_DUMP_INTERVAL=5
NETSTAT_OPEN_CONNECTIONS_INTERVAL=5

. ./config.vars

function atsev2_find_filesys
{
  # find a writeable filesystem with enough disk space:
  local fsys
  for fsys in ${COMMON_ATSEINTL_HOME}/${COMMON_APPNAME}/savedlogs /var/tmp/atsev2/cores /tmp/atsev2/cores /tmp
  do
    [ -d $fsys ] || mkdir -p $fsys >> /dev/null
    [[ -d $fsys && -w $fsys ]] || continue
    local diskSpace=`df -lP $fsys | awk '/Available/ { next; } {print $4; }'`
    if [[ $diskSpace -ge 50000 ]]; then
      mkdir -p $fsys || continue
      TARGET_DIRECTORY=${fsys}
      return 0
    fi
  done
  return 1
}

# Remember to make sure TARGET_DIRECTORY has enough disk space so the script
# doesn't impact the system by filling up the filesystem.
atsev2_find_filesys
if [ ! -w ${TARGET_DIRECTORY} ]; then
  TARGET_DIRECTORY=/tmp
fi
export TARGET_DIRECTORY
# } -- config/configure-environment.sh
#-------------------------------------------------------------------------------

if [ -z "${TARGET_DIRECTORY}" ]
then
  OUTPUT_DIRECTORY="${TIMESTAMPED_NAME}"
  echo "TARGET_DIRECTORY not set. Data will be collected to ${OUTPUT_DIRECTORY}"
else
  OUTPUT_DIRECTORY="${TARGET_DIRECTORY}/${TIMESTAMPED_NAME}"
  echo "Data will be collected in ${OUTPUT_DIRECTORY} directory"
fi
 
mkdir -p ${OUTPUT_DIRECTORY}

if [ $? != 0 ]
then
  echo "ERROR: Output directory ${OUTPUT_DIRECTORY} couldn't be created. Aborting..."
  exit 1
fi

if [ -z "${SCRIPT_EXECUTION_LOG}" ]
then
  SCRIPT_EXECUTION_LOG=${OUTPUT_DIRECTORY}/script-execution.log
fi

printinfo "Collecting troubleshooting data..."

#-------------------------------------------------------------------------------
# { -- utils/collect-os-data.sh
#!/bin/bash

mkdir -p ${OUTPUT_DIRECTORY}/OS

# processes
printinfo "Running processes"
ps -efLZm >> ${OUTPUT_DIRECTORY}/OS/processes-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Open connections - first snapshot"
netstat -aneT >> ${OUTPUT_DIRECTORY}/OS/connections-1-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Waiting before the second snapshot of open connections"
sleep $NETSTAT_OPEN_CONNECTIONS_INTERVAL

printinfo "Open connections - second snapshot"
netstat -aneT >> ${OUTPUT_DIRECTORY}/OS/connections-2-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Network interfaces"
netstat -ieT >> ${OUTPUT_DIRECTORY}/OS/network-interfaces.txt

printinfo "Network routes"
netstat -re >> ${OUTPUT_DIRECTORY}/OS/network-routes.txt

printinfo "Network multicast groups"
netstat -geT >> ${OUTPUT_DIRECTORY}/OS/network-multicast-groups.txt

printinfo "Network statistics"
netstat -se >> ${OUTPUT_DIRECTORY}/OS/network-statistics-`date +${TIMESTAMP_FORMAT}`.txt

# disk
printinfo "Free disk space"
df -a >> ${OUTPUT_DIRECTORY}/OS/df-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Free inodes"
df -ai >> ${OUTPUT_DIRECTORY}/OS/df-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Quota"
quota -ugQ >> ${OUTPUT_DIRECTORY}/OS/quota-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "Open files"
/usr/sbin/lsof >> ${OUTPUT_DIRECTORY}/OS/lsof-`date +${TIMESTAMP_FORMAT}`.txt

# system resources
printinfo "Default limits"
ulimit -a >> ${OUTPUT_DIRECTORY}/OS/ulimit.txt

printinfo "uname"
uname -a >> ${OUTPUT_DIRECTORY}/OS/uname.txt

printinfo "Memory info"
cat /proc/meminfo >> ${OUTPUT_DIRECTORY}/OS/meminfo-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "memfree"
free -t >> ${OUTPUT_DIRECTORY}/OS/memfree-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "CPU info"
cat /proc/cpuinfo >> ${OUTPUT_DIRECTORY}/OS/cpuinfo.txt

# system info
printinfo "dmesg"
dmesg >> ${OUTPUT_DIRECTORY}/OS/dmesg-`date +${TIMESTAMP_FORMAT}`.txt

printinfo "System version"
cp /etc/redhat-release ${OUTPUT_DIRECTORY}/OS/

# sar
printinfo "sar data"
CURRENT_DAY="`date +'%d'`"
cp /var/log/sa/sa${CURRENT_DAY} ${OUTPUT_DIRECTORY}/OS/
YESTERDAY="`date +'%d' -d yesterday`"
cp /var/log/sa/sa${YESTERDAY} ${OUTPUT_DIRECTORY}/OS/
# } -- utils/collect-os-data.sh
#-------------------------------------------------------------------------------
# { -- config/configure-application-data.sh
#!/bin/bash
# Example invocation for non-java application
#
# MY_APPLICATION1_NAME=MyMainApplicationProcess
# MY_APPLICATION1_PID=`pgrep -u usernameowningtheprocess "some-string-from-the-application-commandline-uniquely-identifying-the-application-process"`
#
# collect-app-process-data $MY_APPLICATION1_NAME $MY_APPLICATION1_PID

# Example invocation for java application. collect-java-app-process-data.sh will call collect-app-process-data.sh so you don't need to do it explicitely.
#
# MY_APPLICATION2_NAME=MyMainApplicationProcess
# MY_APPLICATION2_PID=`pgrep -u usernameowningtheprocess "some-string-from-the-application-commandline-uniquely-identifying-the-application-process"`
# MY_APPLICATION2_JAVA_HOME=/usr/java/jdk1.6.0_21
#
#. utils/collect-java-app-process-data.sh $MY_APPLICATION1_NAME $MY_APPLICATION2_PID $MY_APPLICATION2_JAVA_HOME

# determine appname
appname=${COMMON_APPNAME}
if [ "${appname}" == "pricingv2" ]; then
  appname="pricing"
fi

MY_APPLICATION_NAME=${appname}
for MY_APPLICATION_PID in `ps -u ${COMMON_ADMIN_USER} -f | grep "[^]]tseserver.${MY_APPLICATION_NAME}.[0-9][0-9]* " | awk '{ print $2 }'` ; do
  collect-app-process-data ${MY_APPLICATION_NAME} ${MY_APPLICATION_PID}
done

# } -- config/configure-application-data.sh
#-------------------------------------------------------------------------------

# pack it

TGZ_TARGET_FILE="${OUTPUT_DIRECTORY}.tgz"

printinfo "Packing files to ${TGZ_TARGET_FILE}"

cd ${OUTPUT_DIRECTORY}/..

tar czvf ${TGZ_TARGET_FILE} ${TIMESTAMPED_NAME}

if [ $? = 0 ]; then
  printinfo "Cleaning up and finishing"
  rm -rf ${OUTPUT_DIRECTORY}
else
  printinfo "Tar command failed. Removal of ${OUTPUT_DIRECTORY} skipped"
fi

echo "Finished collecting data"
