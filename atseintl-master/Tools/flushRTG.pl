#! /usr/bin/perl
use strict vars;
use IO::Socket;

my ($hostlist, $port, $defaultlist, @tables);

($defaultlist, $port) = &rtg_hosts;

if ($#ARGV + 1 < 1)
{
      print STDERR "Error: wrong number of arguments.\n";
	  &usage();
	  exit 1;
}

while ($_ = shift @ARGV)
{
    if ($_ eq '-h' || $_ eq '--host')
    {
        my $host = shift @ARGV;
        print "host = $host \n";
        $hostlist = ();
        push @$hostlist, $host;
    }
    elsif ($_ eq '-p' || $_ eq '--port')
    {
        $port = shift @ARGV;
        print "port = $port \n";
    }
    elsif ($_ eq '--help')
    {
		&usage();
		exit 0;
    }
	elsif($_ eq '--all')
	{
		print "WARNING: THIS WILL FLUSH ALL TABLES ON ALL PROD BOXES\n";
		print "Continue\? yes or no: ";
		my $answer = <STDIN>;
		chomp $answer;
		if ($answer eq 'yes')
		{
			last;
		}
		else
		{
			exit 0;
		}
	}
    elsif(/-.*/)
    {
        print STDERR "unknown option ", $_, "\n";
		exit 0;
    }
	else
	{
		push @tables, $_;
	}
}

if (!$hostlist) { $hostlist = $defaultlist; }

if (!$hostlist || !$port) { die "usage flush.pl {-h host -p port} |[table...]" };

if (!@tables)
{
    print "flushing all tables on port $port\n" ;
    @tables = ( 
		"BILLINGRECORD", 
		"ADDONCOMBFARECLASS", 
		"ADDONZONE", 
		"INDUSTRYFAREAPPL", 
		"INDFAREBASISMOD", 
		"INDFAREYYEXCEPT", 
		"INDPRICINGAPPL", 
		"INDPRICINGAPPLSEG", 
"FLTTRKGCNTRYGRPSEG", 
"FLTTRKGCNTRYGRP", 
"CARRIERMIXEDCLASSSEG", 
"CARRIERMIXEDCLASS", 
"SYSTEMAIRLINE", 
"BASICBOOKINGREQUEST", 
"CABIN", 
"CABINSEG", 
"CABINEXCEPTION", 
"CARRIERGROUP", 
"DISPLAYDEF", 
"LEGCONNECTPOINTDEF", 
"REGIONALPARTICIPATION", 
"RESTRICTEDAIRPORT", 
"ADDONFARE", 
"INTERNATIONALFARE", 
"DSTADJMINUTES", 
"DSTGROUP", 
"AREA", 
"MULTITRANSPORT", 
"MARKET", 
"STATE", 
"NATION", 
"ATPRESZONENATIONXREF", 
"SUBAREA", 
"ZONE", 
"ZONESEQ", 
"MINFARECXRFLTRESTR", 
"COPMINIMUM", 
"COPPARTICIPATINGNATION", 
"COPTKTGCXREXCEPT", 
"CIRCLETRIPPROVISION", 
"COPCARRIER", 
"MINFAREDOMFARETYPE", 
"MINFAREDEFAULTLOGICSEG", 
"MINFAREFARECLASS", 
"MINFAREFARETYPE", 
"MINFARERULE", 
"MINFAREFARETYPEGRP", 
"MINFAREFARETYPEGRPSEG", 
"MINFAREEXCEPTCXR", 
"EXCLBYRULEFARETYPE", 
"MINFARESECCXRRESTR", 
"SUBJOURNEY", 
"EXCLUDEBYRULE", 
"EXCLBYRULEFARECLASS", 
"EXCLBYRULERULE", 
"TEMPLATEMESSAGE", 
"PFCABSORB", 
"PFCCOLLECTIONEXCEPT", 
"ESSAIRSVC", 
"ESSAIRSVCPROVIDER", 
"PFCEQUIPTYPEEXEMPT", 
"PFCEXEMPTION", 
"PFCEXEMPTIONSEG", 
"PFCMULTIAPT", 
"COTERMINAL", 
"PFC", 
"PFCCARRIEREXCP", 
"FARECLASSAPPLR", 
"FARECLASSAPPSEGW", 
"FARECLASSAPPLW", 
"CONDITIONALRULEEXPCCW", 
"COMBCATCNTLR", 
"COMBCATCNTLW", 
"CONDRULEEXPFTNTW", 
"FTNTCNTLR", 
"FTNTCNTLW", 
"CONDITIONALRULEEXPNCW", 
"NONCOMBCATCNTLR", 
"NONCOMBCATCNTLW", 
"LOWERBOUNDSTABLE", 
"MILEAGE", 
"MILEAGESUBSTITUTION", 
"TARIFFMILEAGEADDON", 
"MILEAGESURCHCXR", 
"MILEAGESURCHEXCEPT", 
"MILEAGESURCHPSGTYPE", 
"ROUTINGREST", 
"SURFACESECTOREXEMPT", 
"TPDPSRVIACXRLOC", 
"TPDPSRTHRUMKTCXR", 
"TPDPSR", 
"TPDPSRVIAGEOLOC", 
"TPDPSRVIAEXCEPT", 
"GENERALRULESEG", 
"GENERALRULE", 
"STOPOVERSSEG", 
"TRANSFERSSEG", 
"CHILDRENSACCPSG", 
"TOURCONDUCTORACCPSG", 
"AGENTACCPSG", 
"OTHERACCPSG", 
"EOETVLSEG", 
"CARRIERCOMBSEQ", 
"TARIFFRULECOMBSEQ", 
"FARECLASSTYPESEQ", 
"OPENJAWSETSSEQ", 
"FARECLASSBKGCODESEG", 
"LOCALE", 
"CARRIERFLTSEG", 
"BOOKINGCODE", 
"FAREBYRULEAPPSEG", 
"AGENCYCALCULATE", 
"CARRIERCRSCALCULATE", 
"GEOCALCULATE", 
"BKGCDEXCEPTIONSSEG", 
"COSCARRIERFLTRESTR", 
"DIFFERENTIALS", 
"SURFACESECTORAPPL", 
"SECTORSURCHARGE", 
"SECTORSURCHPSGTYPE", 
"SECTORSURCHTKTGCXR", 
"AVLPROCESS", 
"CONNECTPOINT", 
"CARRIERDCA", 
"EQUIPMENTCODE", 
"FLIGHTSCHEDULE", 
"SCHEDULELEG", 
"MULTIAIRPORTCITY", 
"MCTREGIONS", 
"AVSREAPPLYEVENTBUFFER", 
"SCHEDULESEGMENTHISTORY", 
"SCHEDULESUMMARYMARKET", 
"SYSTEMPARAMETERS", 
"SCHEDULEINFORMATIONTXT", 
"SCHEDULEUPDATEXREF", 
"CURRENCYNATIONREST", 
"CORPID", 
"CURSELECTASEANCUR", 
"CURSELECTIONGOVCXR", 
"CURRENCYSELECTION", 
"CURSELECTIONPSGTYPE", 
"CURSELECTIONRESTRCUR", 
"CURSELECTIONTEXT", 
"CURRENCY", 
"FARETYPE", 
"FARETYPEMATRIX", 
"GLOBALDIR", 
"GLOBALDIRSEG", 
"MULTIHOS", 
"PSGTYPE", 
"PSGTYPEMATRIX", 
"SEASONTYPE", 
"SURCHARGEDESC", 
"TICKETSTOCK", 
"TICKETSTOCKSEG", 
"PSEUDOCITY", 
"BANKERSSELLINGRATE", 
"FARECACHENOTIFY", 
"LBCACHENOTIFY", 
"ROUTINGCACHENOTIFY", 
"RULECACHENOTIFY", 
"SCHEDULECACHENOTIFY", 
"SUPPORTCACHENOTIFY", 
"CHECKPOINT", 
"COMMISSIONCAP", 
"ERRORCODES", 
"FREETEXT", 
"FREETEXTSEG", 
"KEYWORD", 
"LIMITVIACXRLOC", 
"LIMITGOVCARRIER", 
"LIMITATIONS", 
"LIMITNOTVIAROUTING", 
"LIMITTICKETINGCXR", 
"LIMITTEXTMSG", 
"NUC", 
"SALESNATRESTRCURRSTR", 
"SALESNATRESTRGOVCXR", 
"SALESNATIONRESTR", 
"SALESNATRESTRTEXT", 
"SALESNATRESTRTKTGCXR", 
"THRUFARECITIES", 
"TAXSEGABSORP", 
"TAXAKHICITY", 
"TAXAKHIFACTORR", 
"TAXAKHIFACTOR", 
"TAXCODER", 
"TAXCODE", 
"TAXCODEGENTEXT", 
"TAXCONTROL", 
"TAXCODESEQTEXT", 
"TAXEXEMPCXR", 
"TAXEXEMPEQUIP", 
"TAXNATION", 
"TAXFAREQUOTEAPPL", 
"GENERICTAXCODES", 
"TAXNATIONEXCP", 
"TAXNATIONCOLLECT", 
"TAXNATIONROUND", 
"TAXCODEORDER", 
"TAXORDERTKTISSUE", 
"TAXONTAX", 
"TAXREISSUER", 
"TAXREISSUE", 
"TAXREISSUESEG", 
"TAXRESTRFARECLASS", 
"TAXRESTRFARETYPE", 
"TAXRESTRPSGR", 
"TAXRESTRTRANSIT", 
"TAXRESTRVALCXR", 
"MARKUPSECFILTER", 
"DBECLASS", 
"DBEGLOBALCLASS", 
"SCHEDULESEGMENT", 
"SITAADDONDBECLASS", 
"SITAADDONFAREQUALCD", 
"SITAADDONRULE", 
"DOWTYPE", 
"TSI", 
"TOURSSEG", 
"MINIMUMCONNECTTIME", 
"FAREBYRULECNTL", 
"FTNTCNTL", 
"CONDRULEEXPFBR", 
"CONDRULEEXPFTNT", 
"PFCCOLLECTIONMETHOD", 
"AVSQUOTA", 
"MARKUPCALCULATE", 
"MARKUPCONTROL", 
"CARRIERPREFCOMBPREF", 
"CARRIERPREFFBRPREF", 
"TAXCODECABIN", 
"CONNECTINGCITY", 
"DEPOSITS", 
"FAREDISPINCLDSPLTYPE", 
"FAREDISPINCLFARETYPE", 
"FAREDISPINCLPSGTYPE", 
"FAREDISPINCLRULETRF", 
"FAREDISPLAYPREFSEG", 
"INTERNATIONALADDON", 
"RULEAPPLCOND", 
"RULEAPPLCONDSEG", 
"VISITANOTHERCNTRY", 
"DOMESTICFARE", 
"FAREDISPSUPPRESS", 
"FAREDISPLAYHDRMSGSEG", 
"TARIFFCROSSREF", 
"TARIFFGLOBALS", 
"TARIFFINHIBITS", 
"VENDORCROSSREF", 
"FAREDISPINCLCHDINF", 
"FAREDISPINCLR1PSGTYP", 
"FAREDISPINCLR8PSGTYP", 
"FAREDISPSORTCHAR", 
"FAREDISPSORTFB", 
"FAREDISPSORTGBL", 
"FAREDISPSORTPSG", 
"FAREDISPTEMPLATE", 
"FAREDISPTEMPLATESEG", 
"FAREDISPLAYWEB", 
"FAREDISPLAYWEBSEG", 
"GROUPCODE", 
"HISTORICALTBLINFO", 
"RULECATEGORYDESC", 
"RULETARIFFDESC", 
"TARIFFDESC", 
"TOURCODE", 
"TRAVELPORTION", 
"HOSTCONNECTPOINT", 
"RULECATALPHACD", 
"FARECALCCONFIGSEG", 
"TAXRESTRTKTDSG", 
"COMBCATCNTL", 
"CONDITIONALRULEEXPCC", 
"CONDITIONALRULEEXPNC", 
"FARECLASSAPPSEG", 
"FARECLASSAPPL", 
"NONCOMBCATCNTL", 
"ACCOMPANIEDTRAVEL", 
"ADVRESTKT", 
"AGENTDISCOUNTS", 
"BASEFAREINFOTBL", 
"BKGCDEXCEPTIONS", 
"BLACKOUTDATES", 
"CT2COMP", 
"CT2PLUSCOMP", 
"CARRIERAPPLICATION", 
"CARRIERFLT", 
"CHILDRENSDISCOUNTS", 
"DAYTIMEAPP", 
"EOE", 
"ELIGIBILITY", 
"FARETYPE974", 
"FLIGHTAPP", 
"GEOSPEC", 
"GROUPS", 
"HIPMILEAGEEXCEPT", 
"JOINTCARRIER", 
"MAXSTAY", 
"MINSTAY", 
"MINORCOMBSUBCAT", 
"MISCFARETAGS", 
"NEGFARECALC", 
"NEGFAREREST", 
"NEGFARESECURITY", 
"OPENJAWS", 
"OTHERDISCOUNTS", 
"OVERRIDEDATE", 
"PENALTIES", 
"REISSUE", 
"SALESREST", 
"SAMEPOINTS", 
"SEASONALAPP", 
"STOPOVERS", 
"SURCHARGES", 
"TEXTTBL", 
"TICKETENDORSEMENTS", 
"TOURCONDUCTORDISCNT", 
"TOURS", 
"TRANSFERS", 
"TVLREST", 
"VOLUNTARYCHANGES", 
"VOLUNTARYREFUNDS", 
"WAIVER", 
"CITYPAIRMESSAGE", 
"INTLCACHENOTIFY", 
"FREEBAGGAGE", 
"TAXCARRIERAPPL", 
"TAXCARRIERAPPLSEG", 
"TAXCARRIERFLT", 
"TAXCARRIERFLTSEG", 
"YQYRFEES", 
"YQYRFEESNONCONCUR", 
"POINTOFSALEDEF", 
"MARKETGEOGRAPHY", 
"OWNERAIRLINE", 
"TAXTEXT", 
"MARKUPAUTOACPPREF", 
"MARKUPTRANSACTION", 
"VIEWERSHIPGROUP", 
"VIEWERSHIPGRPLST", 
"MAPSEQ", 
"FAREDISPSORTCXR", 
"FAREDISPSORTVND", 
"FAREDISPLAYHDRMSG", 
"FAREDISPLAYINCLCD", 
"FAREDISPLAYSORT", 
"LBTCONTRACTNOTIFY", 
"MARRIEDCABIN", 
"MARRIEDCABINSEG", 
"PFCTKTDESIGEXCEPT", 
"MINFAREDEFAULTLOGIC", 
"MINIMUMFARE", 
"FARECALCCONFIGTEXT", 
"CACHEBUCKETDEF", 
"POINTOFSALE", 
"AVLOVERRIDE", 
"ROUTING", 
"CONTRACTPREFERENCE", 
"DYNAMICALGORITHM", 
"PRINTOPTION", 
"SHARDSTATE", 
"DCACACHE", 
"FAREBYRULE", 
"FAREBYRULEAPP", 
"FARECALCCONFIG", 
"AVLCACHEUSAGEPROFILE", 
"ASV2STATE", 
"CARRIERPENALTY", 
"SELECTIONSORTDEF", 
"HOSTANDDCA", 
"LBOUNDSWORKQUEUE", 
"CARRIERPREFERENCE", 
"FAREDISPLAYPREF", 
"FARETYPEQUALMSG", 
"FARETYPEQUALPSG", 
"FARETYPEQUALIFIER", 
"ETICKETCARRIER", 
"SURFACETRANSFERS", 
"TRANSFERSA", 
"TRANSFERSASEG", 
"CUSTOMER", 
"OWNERMULTIAIRPORTCITY", 
"ADDONCOMBFARECLASSH", 
"ADDONFAREH", 
"ADDONZONEH", 
"BANKERSSELLINGRATEH", 
"BOOKINGCODEH", 
"COMBCATCNTLH", 
"CONDITIONALRULEEXPCCH", 
"CONDITIONALRULEEXPNCH", 
"CONDRULEEXPFBRH", 
"CONDRULEEXPFTNTH", 
"CORPIDH", 
"DOMESTICFAREH", 
"EXCLBYRULEFARECLASSH", 
"EXCLBYRULEFARETYPEH", 
"EXCLBYRULERULEH", 
"EXCLUDEBYRULEH", 
"FAREBYRULEAPPH", 
"FAREBYRULEAPPSEGH", 
"FAREBYRULECNTLH", 
"FARECLASSAPPLH", 
"FARECLASSAPPSEGH", 
"FTNTCNTLH", 
"GENERICTAXCODESH", 
"INTERNATIONALFAREH", 
"MAPSEQH", 
"MARKUPCALCULATEH", 
"MARKUPCONTROLH", 
"MINFARECXRFLTRESTRH", 
"MINFAREDEFAULTLOGICH", 
"MINFAREDEFAULTLOGICSEGH", 
"MINFAREDOMFARETYPEH", 
"MINFAREEXCEPTCXRH", 
"MINFAREFARECLASSH", 
"MINFAREFARETYPEH", 
"MINFARERULEH", 
"MINFARESECCXRRESTRH", 
"MINIMUMFAREH", 
"NONCOMBCATCNTLH", 
"NUCH", 
"ROUTINGH", 
"ROUTINGRESTH", 
"ROUTINGTEXTH", 
"SITAADDONDBECLASSH", 
"SITAADDONFAREQUALCDH", 
"SITAADDONRULEH", 
"TAXAKHICITYH", 
"TAXAKHIFACTORH", 
"TAXCODECABINH", 
"TAXCODEGENTEXTH", 
"TAXCODEH", 
"TAXCODEORDERH", 
"TAXCODESEQTEXTH", 
"TAXEXEMPCXRH", 
"TAXEXEMPEQUIPH", 
"TAXFAREQUOTEAPPLH", 
"TAXNATIONCOLLECTH", 
"TAXNATIONROUNDH", 
"TAXONTAXH", 
"TAXORDERTKTISSUEH", 
"TAXREISSUEH", 
"TAXREISSUESEGH", 
"TAXRESTRFARECLASSH", 
"TAXRESTRFARETYPEH", 
"TAXRESTRPSGRH", 
"TAXRESTRTKTDSGH", 
"TAXRESTRTRANSITH", 
"TAXRESTRVALCXRH", 
"TAXSEGABSORPH", 
"YQYRFEESH", 
"YQYRFEESNONCONCURH", 
"ZONEH", 
"ZONESEQH", 
"AVLMETHOD", 
"AVSSUMMARY" 
 ); }
			

for (@$hostlist)
{
    &send_flush($_, $port, @tables);
}

exit;

sub send_flush
{
    my $host = shift;
    my $port = shift;
    my @tables = @_;
    
    my $headersize = pack('N',16);

    foreach (@tables) 
    {
        my $tablename = uc $_;
		my $payload = "<FlushDBRequest TABLE=\"=$tablename\" KEY=\"\" />";
        my $payloadsize = pack('N', length($payload));
        my $command = $headersize . $payloadsize . 'RESP' . '0001' . '0000' . $payload;

        my $sock = new IO::Socket::INET(PeerAddr => $host, PeerPort => $port, Proto => 'tcp' )
                   or (print STDERR "Could not connect to $host:$port\n" and return);
        print "flushing $tablename on $host:$port\n";
        print $sock $command;
		my @response = <$sock> or die "Failed to receive response: $!";
    	close $sock;
  		# Remove header and print response from RTG server
    	#$response[0] = substr $response[0], 12;
	    #my $result = join //, @response;
    	#print substr $result, 0, ((length $result) -1);
		#print "\n\n";
        sleep 1;
    }
}

sub rtg_hosts
{
    print "processing rtg hosts\n";
    my @hosts = (
        'piclp002',
        'piclp003',
        'piclp006',
        'piclp007',
        'piclp008',
        'piclp143',
        'piclp144',
        'piclp168',
        'piclp219',
        'piclp220',
        'piclp221',
        'piclp222',
        'piclp223',
        'piclp224',
        'piclp225',
        'piclp226',
        'piclp260',
		'pimlp038',
		'pimlp039',
		'pimlp040',
		'pimlp041',
		'pimlp042'
    );
    return \@hosts, 53801;
}
sub usage
{
	print "Usage: flushRTG.pl {--help | --all | -h host -p port } { [table ...] }\n";
}
