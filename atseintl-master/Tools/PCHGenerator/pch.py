#!/project/stor06/sg891856/pkgs/RH-5.2/python/bin/python

# pchGenerator

import os
import sys
import tempfile

from gcc_facade import GCCFacade
from headers_dag import HeaderNode, HeadersDag
from process_argv import processArgv
from recursive_filter import RecursiveFilter
from should_be_in_pch import ShouldBeInPCH
from stack import Stack
from topological_sorter import TopologicalSorter

#
# generateHeadersDag
#
def generateHeadersDag( options, compilerFacade ):
    dag = HeadersDag()

    compilationOptions = compilerFacade.processCompOptions( options.compilation_options )

    for sourceFilename in options.files:
        print( "Processing... ", sourceFilename, ", found ", len( dag.getNodes() ), " till now." )

        headers = compilerFacade.getHeaders( sourceFilename, compilationOptions )

        for line in headers.split( "\n" ):
            if len( line ) == 0:
                continue

            try:
                dag.add( * compilerFacade.parseLine( line ) )
            except Exception as e:
                print( "Warning: ", e )

        dag.processOneFile()

    print( "All files processed, found", len( dag.getNodes() ), "headers." )

    return dag

#
# updateHeadersDag
#
def updateHeadersDag( dag, rFilter, options, compilerFacade ):
    compilationOptions = compilerFacade.processCompOptions( options.compilation_options )

    for node in rFilter.getNodes():
        print( "- Updating... ", node.getData() )

        tempFileName = tempfile.gettempprefix()

        outputFile = open( tempFileName, "w" )

        outputFile.write( "#include \"" + node.getData() + "\"\n\nint main(){}\n\n")
        outputFile.close()

        headers = compilerFacade.getHeaders( tempFileName, compilationOptions )

        for line in headers.split( "\n" ):
            if len( line ) == 0:
                continue

            try:
                dag.update( * compilerFacade.parseLine( line ) )
            except Exception as e:
                print( "Warning: ", e )

    os.remove( tempFileName )

    return dag

#
# generatePCHPrologue
#
def generatePCHPrologue( outputFile, options ):
    outputFile.write( "// File generated by  : " + sys.argv[0] + "\n" )
    outputFile.write( "// Compilation options: " + options.compilation_options + "\n" )
    outputFile.write( "// Project path       : " + options.project_path + "*\n" )
    outputFile.write( "// Threshold          : " + str( options.threshold ) + "\n" )
    outputFile.write( "// Exclude pattern    : " + ",".join( options.exclude ) + "\n" )
    outputFile.write( "// Exclude but pattern: " + ",".join( options.exclude_except ) + "\n" )

#
# generatePCH
#
def generatePCH( rFilter, options ):
    outputFile = open( options.output, "w" )

    generatePCHPrologue( outputFile, options )

    for node in rFilter.getNodes():
        outputFile.write( "#include \"" + node.getData() + "\"\n" )

#
# printWatchHeaderInfo
#
def printWatchHeaderInfo( dag, options ):
    if len( options.watch_header ) == 0:
        return

    print( "\n-- watch header for: ", options.watch_header )

    try:
        node = dag.get( options.watch_header )

        print( "\nIncluded?..." )
        print( "  ", node.getFailingReason() )

        print( "\nHow many times header included..." )
        print( "  ", node.getCounter(), "/", len( options.files ) )

        print( "\nParents..." )
        for parent in node.getParents():
            print( "  ", parent.getData() )

        print( "\nChildren..." )
        for child in node.getChildren():
            print( "  ", child.getData() )

    except Exception as e:
        print( "\nHeader not found:", options.watch_header )

    print( "\n-- argument line options:\n" )
    print( options )

#
# runApplication
#
def runApplication():
    options = processArgv( sys.argv[1:] )

    dag = generateHeadersDag( options, GCCFacade() )

    tSorter = TopologicalSorter( dag )

    predicate = ShouldBeInPCH( options )

    rFilter = RecursiveFilter( tSorter, predicate, options )

    dag = updateHeadersDag( dag, rFilter, options, GCCFacade() )

    tSorter = TopologicalSorter( dag )

    rFilter = RecursiveFilter( tSorter, predicate, options )

    generatePCH( rFilter, options )

    printWatchHeaderInfo( dag, options )

#
# main
#
if __name__ == "__main__":
    runApplication()
