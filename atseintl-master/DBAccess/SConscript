#!/usr/bin/env python

# Author: Piotr Bartosik (piotr.bartosik@sabre.com)
# Copyright Sabre 2013

import os

Import('env')
import scommon

dbaccess_objs = {}
env.stash['DBACCESS_OBJECTS'] = dbaccess_objs
collector = scommon.NodeCollector(dbaccess_objs)

def build_secondary_libs(env, dircontext):
    for libname, varname in [
            ('DBAccess1', 'DB1_SOURCES'),
            ('DBAccess2', 'DB2_SOURCES'),
            ('DBAccess3', 'DB3_SOURCES'),
            ('DBAccess4', 'DB4_SOURCES'),
            ('DBAccess5', 'DB5_SOURCES'),
            ('DBAccessTaxes', 'DBTAXES_SOURCES')]:
        mkr = env.factory.libmaker(libname, objobserver=collector)
        mkr.add_sources(dircontext.mksources.filelist(varname))
        mkr.make()

def build_primary_lib(env, dircontext):
    env.add_libs_from(env.installdir, 'DBAccess1', 'DBAccess2', 'DBAccess3', 'DBAccess4', 'DBAccess5', 'DBAccessTaxes')
    lm = env.factory.libmaker('DBAccess', objobserver=collector)
    lm.add_sources(dircontext.mksources.filelist('DB_SOURCES'))
    dbaccess_lib_node = lm.make()
    # store the node to pass it as a dependency
    # while building test/DBAccessMock
    env.stash['dbaccess_lib_node'] = dbaccess_lib_node


s = env.msscout()
s.env.add_isystem_paths('$ORACLE_CPPPATH_')
s.werror = True
s.add_task(build_secondary_libs)
s.add_task(build_primary_lib, copyenv=True)
s.build()

