#include "Common/ErrorResponseException.h"

namespace tse
{
namespace
{

std::map<ErrorResponseException::ErrorResponseCode, std::string>
getErrorMessageMap()
{
  std::map<ErrorResponseException::ErrorResponseCode, std::string> m;
  //
  // FQ / Fare Display codes start at 4000
  //
  m[ErrorResponseException::NO_QUOTABLE_FARES] = "NO QUOTABLE FARES FOUND";
  m[ErrorResponseException::INVALID_INCLUSION_CODE] = "$INVALID INCLUSION CODE$";
  m[ErrorResponseException::INVALID_PAX_TYPE_CODE] = "$FORMAT-PSGR TYPE$";
  m[ErrorResponseException::INVALID_WEB_MULTICARRIER] = "$WEB REQUEST MUST BE SINGLE CARRIER$";
  m[ErrorResponseException::INVALID_WEB_AND_PAXTYPE] =
      "$PASSENGER TYPE NOT ALLOWED WITH WEB INCLUSION CODE$";
  m[ErrorResponseException::PRCRD_FARE_BASIS_NOT_FOUND] =
      "$FARE BASIS NOT FOUND FOR CITYPAIR/DATE$";
  m[ErrorResponseException::LONGRD_FARE_BASIS_NOT_FOUND] =
      "$FARE BASIS NOT FOUND FOR CITYPAIR/DATE$";
  m[ErrorResponseException::SHORTRD_FARE_BASIS_NOT_FOUND] =
      "$FARE BASIS NOT FOUND FOR CITYPAIR/DATE$";
  m[ErrorResponseException::FARE_BASIS_NOT_FOUND] = "$FARE BASIS NOT FOUND FOR CITYPAIR/DATE$";
  m[ErrorResponseException::RETURN_DATE_CONTINUITY] = "$RETURN DATE CONTINUITY$";
  m[ErrorResponseException::ENTER_ONLY_1_JOURNEY_TYPE] = "ENTER ONLY 1 JOURNEY TYPE QUALIFIER";
  m[ErrorResponseException::DUPLICATE_CABIN_INCLUSION_CODE] = "$DUPLICATE CABIN INCLUSION CODE$";

  // MP error messages
  m[ErrorResponseException::MP_WITH_ROUTING_FARE] = "$MP ENTRY INVALID WITH ROUTING FARE$";
  m[ErrorResponseException::MP_OW_ON_RT_FARE] = "$OW NOT ALLOWED ON RT FARE$";
  m[ErrorResponseException::MP_HR_ON_OW_FARE] = "$HR NOT ALLOWED ON OW FARE$";

  //
  // WP / Pricing codes start at 5000
  //
  m[ErrorResponseException::NO_FARE_REQUESTED] = "NO FARE REQUESTED";
  m[ErrorResponseException::PRICING_REST_BY_GOV] = "PRICING RESTRICTED BY GOVT ORDER";
  m[ErrorResponseException::NO_FARE_FOR_CLASS_USED] = "NO FARE FOR CLASS USED";
  m[ErrorResponseException::CITY_PAIR_RESTRICTED_BY_FBM] = "CITY PAIR RESTRICTED BY FBM";
  m[ErrorResponseException::CANNOT_COMPUTE_TAX] = "UNABLE TO COMPUTE TAX";
  m[ErrorResponseException::AIRPORT_CODE_NOT_IN_SYS] = "AIRPORT CODE NOT IN SYS";
  m[ErrorResponseException::FARE_NOT_IN_SYS] = "FARE NOT IN SYSTEM";
  m[ErrorResponseException::CHECK_DATE_TIME_CONTINUITY_OF_FLIGHTS] =
      "CHECK DATE/TIME CONTINUITY OF FLIGHTS";
  m[ErrorResponseException::JT_RESTRICTED_RTG_INVALID] = "JT RESTRICTED RTG INVALID";
  m[ErrorResponseException::TRIP_EXCEEDS_MPM_SOM] = "TRIP EXCEEDS MPM SOM";
  m[ErrorResponseException::SHOPPING_MAX_NUMBER_COMBOS_EXCEEDED] =
      "MAX NBR COMBINATIONS EXCEEDED";
  m[ErrorResponseException::MAX_NUMBER_COMBOS_EXCEEDED] =
      "MAX NBR COMBINATIONS EXCEEDED/USE SEGMENT SELECT";
  m[ErrorResponseException::FREE_SURCHARGED_STOPOVER_MAY_APPLY] =
      "FREE/SURCHARGED STOPOVER/S/ MAY APPLY";
  m[ErrorResponseException::TOO_MANY_SURFACE_SEGS] = "TOO MANY SURFACE SEGS";
  m[ErrorResponseException::NO_DATE_IN_OPEN_SEG] = "NO DATE IN OPEN SEGMENT";
  m[ErrorResponseException::CHECK_LINE_OF_FLIGHT] = "CHECK LINE OF FLIGHT";
  m[ErrorResponseException::STOPOVER_SURCHARGE_MAY_APPLY] = "STOPOVER SURCHARGE MAY APPLY";
  m[ErrorResponseException::NO_RULES_FOR_PSGR_TYPE_OR_CLASS] =
      "NO RULES VALID FOR PASSENGER TYPE/CLASS OF SERVICE";
  m[ErrorResponseException::NO_THRU_CLASS_FOR_ENROUTE_CHANGE_FLT] =
      "UNABLE TO FIND THRU CLASS FOR ENROUTE CHANGE FLT";
  m[ErrorResponseException::FIRST_SEG_OPEN] = "1ST SEG OPEN";
  m[ErrorResponseException::RETRY_IN_ONE_MINUTE] = "RETRY IN ONE MINUTE";
  m[ErrorResponseException::NO_TIMES_IN_OA_SEG] = "NO TIMES IN OA SEG";
  m[ErrorResponseException::SYSTEM_ERROR] = "SYSTEM ERROR";
  m[ErrorResponseException::FARE_RESTRICTED_FROM_PRICING] = "FARE RSTRCTD FRM PRICING-MAY APPLY";
  m[ErrorResponseException::INVALID_ROUTING_OR_SEG_BETWEEN_CO_TERM] =
      "INVALID RTG OR SEG BTWN CO-TERM";
  m[ErrorResponseException::PRICING_AT_PEAK_USAGE] = "UTP-REPEAT ENTRY";
  m[ErrorResponseException::MIXED_CLASS_TRIP] = "MIXED CLS TRIP-PRICING RSTRCTD";
  m[ErrorResponseException::MAX_PERMITTED_MILEAGE_NOT_AVAIL] =
      "MAXIMUM PERMITTED MILEAGE NOT AVAILABLE";
  m[ErrorResponseException::MAX_SEGS_EXCEEDED] = "MAXIMUM EIGHT SEGMENTS FOR ENTRY";
  m[ErrorResponseException::TOTAL_FARE_TOO_LARGE] = "TOTAL FARE TOO LARGE";
  m[ErrorResponseException::SYSTEM_DATA_ERROR] = "SYSTEM DATA ERROR";
  m[ErrorResponseException::FAILED_DUE_TO_COMBO_RESTRICTIONS] = "NO PROMO FARE ON TRIP BASIS";
  m[ErrorResponseException::NO_COMBINABLE_FARES_FOR_CLASS] = "NO COMBINABLE FARES FOR CLASS USED";
  m[ErrorResponseException::FARE_BASIS_EXCEED_7CHAR_FOR_TAT_TM] =
      "FARE BASIS EXCEED 7CHAR FOR TAT/TM";
  m[ErrorResponseException::MAX_COMBOS_EXCEEDED_FOR_AUTO_PRICING] =
      "MAX COMBOS EXCEEDED FOR AUTO PRICING";
  m[ErrorResponseException::CANNOT_FORMAT_TAX] = "UNABLE TO CALCULATE TAX - APPLY MANUALLY";
  m[ErrorResponseException::NBR_PSGRS_EXCEEDS_OA_AVAIL] = "CPA IS RESTRICTED BY FBM";
  m[ErrorResponseException::NO_FARE_VALID_FOR_PSGR_TYPE] = "NO FARE VALIOD FOR PSGR TYPE";
  m[ErrorResponseException::EXCEEDS_ALLOWED_SEGS_CHANGED_CLASS_FLIGHTS] =
      "EXCEEDS ALLOWABLE SEGS DUE TO CHG IN CLS FLTS";
  m[ErrorResponseException::CHECK_FLIGHT] = "CHECK FLIGHT";
  m[ErrorResponseException::FARE_CALC_TOO_LARGE_FOR_ATB] = "FARE CALC TOO LARGE FOR ATB";
  m[ErrorResponseException::CANNOT_CALC_SD_FARE] = "CANNOT CALC SD FARE";
  m[ErrorResponseException::TICKET_DESIGNATOR_NOT_ALLOWED] = "TICKET DESIGNATOR NOT ALLOWED";
  m[ErrorResponseException::WPNJ_NOT_VALID_ON_THIS_ITIN] = "WPNJ NOT VALID ON THIS ITIN";
  m[ErrorResponseException::CANNOT_CALCULATE_CURRENCY] = "CANNOT CALCULATE CURRENCY";
  m[ErrorResponseException::CANNOT_ROUND_CURRENCY] = "CANNOT ROUND CURRENCY";
  m[ErrorResponseException::BREAK_FARE_INVALID] = "BREAK FARE INVALID";
  m[ErrorResponseException::RETRY] = "RETRY";
  m[ErrorResponseException::NEED_COMMISSION] = "NEED COMMISSION";
  m[ErrorResponseException::OPEN_JAW_MAY_APPLY] = "OPEN JAW MAY APPLY";
  m[ErrorResponseException::FLT_CHK_DATE_TIME_CONTINUITY_OF_FLTS] =
      "FLT CHK DATE TIME CONTINUITY OF FLTS";
  m[ErrorResponseException::FARE_BASIS_NOT_AVAIL] = "FARE BASIS NOT AVAIL";
  m[ErrorResponseException::TRANSACTION_THRESHOLD_REACHED] = "WORLDFARE AT PEAK USE";
  m[ErrorResponseException::WORLDFARE_AT_PEAK_USE] = "WORLDFARE AT PEAK USE";
  m[ErrorResponseException::WORLDFARE_UNAVAILABLE] = "WORLDFARE UNAVAILABLE";
  m[ErrorResponseException::TKT_DES_FAILE_RULES_CHECK] = "TKT DES FAILE RULES CHECK";
  m[ErrorResponseException::TKT_DES_RECORD_RETRIEVAL_ERROR] = "TKT DES RECORD RETRIEVAL ERROR";
  m[ErrorResponseException::PROCESSING_ERROR_DETECTED] = "PROCESSING ERROR DETECTED";
  m[ErrorResponseException::PENALTY_DATA_INCOMPLETE] = "PENALTY DATA INCOMPLETE";
  m[ErrorResponseException::LOW_FARE_NOT_ALLOWED_FOR_CLASS_USED] =
      "LOW FARE NOT ALLOWED FOR CLASS USED";
  m[ErrorResponseException::WRONG_NUMBER_OF_FARES] = "WRONG NUMBER OF FARES";
  m[ErrorResponseException::DISCOUNT_AMT_EXCEEDS_FARE_COMPONENT_TOTAL] =
      "DISCOUNT AMT EXCEEDS FARE COMPONENT TOTAL";
  m[ErrorResponseException::ENTRIES_NOT_COMBINABLE_WITH_DISCOUNT] =
      "ENTRIES NOT COMBINABLE WITH DISCOUNT";
  m[ErrorResponseException::OPEN_RETURN_REQUIRED] = "OPEN RETURN REQUIRED";
  m[ErrorResponseException::NO_FARE_BASIS_FOR_AIRPORT_PAIR_AGENCY] =
      "NO FARE BASIS FOR AIRPORT PAIR AGENCY";
  m[ErrorResponseException::CANNOT_COMPUTE_TAX_COMPUTE_MANUALLY] =
      "CANNOT COMPUTE TAX COMPUTE MANUALLY";
  m[ErrorResponseException::CANNOT_TAX_INSERT_TAX_AFTER_TX] = "CANNOT TAX INSERT TAX AFTER TX";
  m[ErrorResponseException::MULTI_DISCOUNTS_EXIST] = "MULTI DISCOUNTS EXIST";
  m[ErrorResponseException::NO_VALID_DISCOUNT_PUB_FARE] = "NO VALID DISCOUNT PUB FARE";
  m[ErrorResponseException::SCHEDULES_NOT_AVAILABLE_FOR_CARRIER_DATE] =
      "SCHEDULES NOT AVAILABLE FOR CARRIER DATE";
  m[ErrorResponseException::DATA_ERROR_DETECTED] = "DATA ERROR DETECTED";
  m[ErrorResponseException::NO_NOPNROPTIONS_FOR_TRX] = "NO NOPNROPTIONS FOR TRX";
  m[ErrorResponseException::NO_PNR_CREATED] = "NO PNR CREATED";
  m[ErrorResponseException::NO_FARE_FOR_CLASS] = "NO FARE FOR CLASS";
  m[ErrorResponseException::ErrorResponseCode::CANNOT_PRICE_AS_REQUESTED] =
      "CANNOT PRICE AS REQUESTED";
  m[ErrorResponseException::NO_FARES_RBD_CARRIER] = "NO FARES RBD CARRIER";
  m[ErrorResponseException::NEGOTIATED_FARES_APPLY] = "NEGOTIATED FARES APPLY";
  m[ErrorResponseException::NO_FARES_FOUND_FOR_FARE_COMPONENT] =
      "NO FARES FOUND FOR FARE COMPONENT";
  m[ErrorResponseException::CODESHARE_PROCESSING_ERROR] = "CODESHARE PROCESSING ERROR";
  m[ErrorResponseException::NO_MATCH_FOR_FARE_COMPONENT] = "NO MATCH FOR FARE COMPONENT";
  m[ErrorResponseException::INVALID_FARE_BASIS_FOR_CARRIER] = "INVALID FARE BASIS FOR CARRIER";
  m[ErrorResponseException::REQ_CARRIER_HAS_NO_FARES] = "REQ CARRIER HAS NO FARES";
  m[ErrorResponseException::EXCEED_LENGTH_UNABLE_TO_CALCULATE_FARE] =
      "EXCEED LENGTH UNABLE TO CALCULATE FARE";
  m[ErrorResponseException::EXCEED_LENGTH_UNABLE_TO_CONVERT_CURRENCY] =
      "EXCEED LENGTH UNABLE TO CONVERT CURRENCY";
  m[ErrorResponseException::NO_APPLICABLE_YY_FARES] = "THERE ARE NO APPLICABLE YY FARES";
  m[ErrorResponseException::UNABLE_TO_CALCULATE_BSR_NOT_AVAILABLE] =
      "UNABLE TO CALCULATE - BSR NOT AVAILABLE";
  m[ErrorResponseException::BAD_FARE_PATH_TOTAL_NUC_AMOUNT] = "BAD FARE PATH TOTAL NUC AMOUNT";
  m[ErrorResponseException::UNABLE_TO_PRICE_ISSUE_SEPARATE_TICKETS] =
      "UNABLE TO PRICE ISSUE SEPARATE TICKETS";
  m[ErrorResponseException::PU_NOT_ALLOWED_WITH_CAT35_NET_FARES] =
      "PU NOT ALLOWED WITH CAT35 NET FARES";
  m[ErrorResponseException::ENTRY_RESTRICTED_TO_EPR_KEYWORD_MUL375] =
      "ENTRY RESTRICTED TO EPR KEYWORD MUL375";
  m[ErrorResponseException::MCP_IAP_RESTRICTED] =
      "UNABLE TO PROCESS-ENTRY RESTRICTED IN PARTITION ";
  m[ErrorResponseException::FEE_CURRENCY_CONVERSION_FAILED] = "FEE CURRENCY CONVERSION FAILED";
  m[ErrorResponseException::RW_CT_FARE_NOT_APPLICABLE_USE_ALTERNATE_PRICING_COMMAND] =
      "RTW/CT FARE NOT APPLICABLE / USE ALTERNATE PRICING COMMAND";

  m[ErrorResponseException::DYNAMIC_CONFIGURATION_RELOAD_IN_PROGRESS] = "WORLDFARE AT PEAK USE";
  m[ErrorResponseException::VALIDATING_CXR_ERROR] = "UNABLE TO DETERMINE VALIDATING CARRIER";
  m[ErrorResponseException::NON_RTW_FARE_CANNOT_BE_EXCHANGED_FOR_RTW_FARE] =
      "NON-RTW/CT FARE CANNOT BE EXCHANGED FOR RTW/CT FARE";
  m[ErrorResponseException::REQUESTED_BRAND_NOT_FOUND] =
      "REQUESTED BRAND NOT FOUND";
  m[ErrorResponseException::ALLEGED_RTW_EXCHANGE_FARE_DO_NOT_MET_TRIP_CHARACTERISTIC] =
      "ALLEGED RTW EXCHANGE FARE DO NOT MET TRIP CHARACTERISTIC";
  m[ErrorResponseException::BRANDING_SERVICE_UNAVAILABLE] =
      "BRANDING SERVICE IS UNAVAILABLE";
  m[ErrorResponseException::MAXIMUM_PENALTY_TOO_RESTRICTIVE] = "MAXIMUM PENALTY IS TOO RESTRICTIVE";
  m[ErrorResponseException::SFB_LIST_OF_SOLUTION_NOT_ALLOWED_FOR_TICKETING] =
      "MORE THAN 1 FARE MATCHING PLEASE PRICE AND STORE SELECTED FARE FOR TICKETING";
  m[ErrorResponseException::SFB_RULE_VALIDATION_FAILED] =
      "RULE VALIDATION FAILED, TRY COMMAND PRICING WPQ";
  m[ErrorResponseException::UNKNOWN_BAGGAGE_CHARGES] =
      "UNKNOWN BAGGAGE CHARGES FOR ALL ITINERARIES";
  m[ErrorResponseException::ADJUSTED_AMOUNT_EXCEEDS_BASE_FARE_WITHOUT_SURCHARGES] =
      "ADJUSTED AMOUNT EXCEEDS BASE FARE WITHOUT SURCHARGES";
  m[ErrorResponseException::INVALID_MSL_AMOUNT_SPECIFIED] =
      "INVALID MSL AMOUNT SPECIFIED";
  m[ErrorResponseException::NO_COMBINABLE_FARE_MARKET] = "NO COMBINABLE FARE MARKET";
  //
  // Negotiated Fare IT/BT ticketing codes start at 5500
  //
  m[ErrorResponseException::ISSUE_SEPARATE_TICKET] = "ISSUE SEPARATE TICKETS";
  m[ErrorResponseException::UTAT_NET_SELLING_AMOUNTS_CONFLICT] =
      "UNABLE TO AUTO TICKET - NET/SELLING AMOUNTS CONFLICT";
  m[ErrorResponseException::UTAT_MULTIPLE_TOUR_CODES] =
      "UNABLE TO AUTO TICKET - MULTIPLE TOUR CODES";
  m[ErrorResponseException::UTAT_TOUR_CODE_NOT_FOUND] =
      "UNABLE TO AUTO TICKET - TOUR CODE NOT FOUND";
  m[ErrorResponseException::UTAT_INVALID_TEXT_BOX_COMBO] =
      "UNABLE TO AUTO TICKET - INVALID TEXT BOX COMBINATION";
  m[ErrorResponseException::UTAT_COMMISSIONS_NOT_COMBINABLE] =
      "UNABLE TO AUTO TICKET - COMMISSIONS NOT COMBINABLE";
  m[ErrorResponseException::NET_REMIT_FARE_PHASE_FOUR] =
      "NET REMIT FARE PHASE FOUR AND USE NET/FOR TKT ISSUANCE";
  m[ErrorResponseException::UNABLE_TO_PROCESS_NEG_FARE_DATA] =
      "UNABLE TO PROCESS NEGOTIATED FARE DATA";
  m[ErrorResponseException::NO_NET_FARE_AMOUNT] = "NO NET FARE AMOUNT";
  m[ErrorResponseException::INVALID_COMBO_NO_NET_FARE_DISPLAY] =
      "INVALID COMBINATION OF FARES NO NET FARE DISPLAY";
  m[ErrorResponseException::UNABLE_AUTO_TKT_INV_COMM_AMOUNT] =
      "NEED COMMISSION PERCENTAGE - UNABLE TO AUTO TICKET";
  m[ErrorResponseException::UNABLE_AUTO_TKT_INV_NET_REMIT_FARE] =
      "INVALID NET REMIT FARE - UNABLE TO AUTO TICKET";
  m[ErrorResponseException::UTAT_MULTIPLE_VALUE_CODES] =
      "UNABLE TO AUTO TICKET - MULTIPLE VALUE CODES";
  m[ErrorResponseException::UTAT_MULTIPLE_PRINT_OPTIONS] =
      "UNABLE TO AUTO TICKET - MULTIPLE PRINT OPTIONS";

  m[ErrorResponseException::FARE_REQUIRE_COMM_PERCENT] = "FARE REQUIRES COMMISSION PERCENT";
  //
  // TripSearch / BargainFinder / Low Fare Search codes start at 6000
  //
  m[ErrorResponseException::INVALID_JOURNEY_RECORD] = "INVALID-JOURNEY RECORD PRESENT";
  m[ErrorResponseException::INVALID_INPUT] = "INVALID INPUT FORMAT";
  m[ErrorResponseException::INVALID_DUTY_CODE] = "INVALID DUTY CODE";
  m[ErrorResponseException::NO_ITIN_SEGS_FOUND] = "NO ITINERARY SEGMENTS FOUND";
  m[ErrorResponseException::PNR_DATABASE_ERROR] = "PNR DATA BASE ERROR";
  m[ErrorResponseException::NEED_PREFERRED_CARRIER] = "NEED PREFERRED CARRIER";
  m[ErrorResponseException::MAX_PREF_CARRIERS_EXCEEDED] = "SEE CTP-MORE THAN 3 PREF CARRIERS";
  m[ErrorResponseException::MAX_PASSENGERS_EXCEEDED] = "MAXIMUM PASSENGERS ALLOWED IS 8";
  m[ErrorResponseException::INVALID_SAME_PREF_AND_NON_PREF_CARRIER] =
      "INVALID-SAME PREF/NON-PREF CARRIER";
  m[ErrorResponseException::ENTER_ACTIVE_SEGS] = "ENTER ACTIVE SEGMENTS";
  m[ErrorResponseException::CONFLICTING_OPTIONS] = "CONFLICTING OPTIONS SEE *";
  m[ErrorResponseException::INVALID_SEG_TYPE_IN_PNR_RETIEVAL] = "INVALID SEG TYPE IN PNR RETIEVAL";
  m[ErrorResponseException::PNR_SEGS_NOT_FOUND] = "PNR SEGS NOT FOUND";
  m[ErrorResponseException::CHECK_SEG_CONTINUITY] = "CHECK SEG CONTINUITY";
  m[ErrorResponseException::INVALID_TERMINAL_TYPE] = "INVALID TERMINAL TYPE";
  m[ErrorResponseException::MULTI_CONNECT] = "MULTI CONNECT - SPECIFY BREAK POINT";
  m[ErrorResponseException::DUPLICATE_X_AND_O_QUALIFIER] = "DUPLICATE X AND O QUALIFIER-REENTER";
  m[ErrorResponseException::CANNOT_USE_SEG_NUMBER] = "UNABLE TO USE SEGMENT NUMBER-MODIFY";
  m[ErrorResponseException::BOOK_SEPARATE_PNR] = "BOOK SEPARATE PNR FOR **";
  m[ErrorResponseException::MAX_FOUR_SEATS] = "MAXIMUM FOUR SEATS FOR **";
  m[ErrorResponseException::TRY_DIAGNOSTIC_ENTRY_10_20] = "TRY DIAGNOSTIC ENTRY # 10 - 20";
  m[ErrorResponseException::TRY_DIAGNOSTIC_ENTRY_1_6] = "TRY DIAGNOSTIC ENTRY # 1 - 6";
  m[ErrorResponseException::SPECIFY_PUBLIC_OR_PRIVATE] = "SPECIFY PUBLIC OR PRIVATE";
  m[ErrorResponseException::NO_DIAGNOSTIC_TO_DISPLAY] = "NO DIAGNOSTIC TO DISPLAY";
  m[ErrorResponseException::NO_CONVERTED_FARE_BASIS_CODE] = "NO CONVERTED FARE BASIS CODE";
  m[ErrorResponseException::NO_PQ_ITEMS_FOR_GIVEN_ORDINAL] = "NO PQ ITEMS FOR GIVEN ORDINAL";
  m[ErrorResponseException::FARENET_PROCESSING_NOT_YET_AVAIL] =
      "FARENET PROCESSING NOT YET AVAILABLE";
  m[ErrorResponseException::CALL_DIRECT] = "CALL DIRECT";
  m[ErrorResponseException::NO_FLIGHTS_FOUND] = "NO FLIGHTS FOUND FOR 0";
  m[ErrorResponseException::INVALID_CLASS] = "INVALID CLASS USED";
  m[ErrorResponseException::NO_COMBOS] = "NO VALID COMBINATIONS FOUND";
  m[ErrorResponseException::INVALID_FORMAT] = "INVALID FORMAT";
  m[ErrorResponseException::NO_TRIP] = "TRIP NOT FOUND";
  m[ErrorResponseException::CANNOT_SELL_SEG] = "UNABLE TO SELL SEGMENTS";
  m[ErrorResponseException::MUST_BE_PRICED_FIRST] = "INVALID-MUST BE PRICED FIRST";
  m[ErrorResponseException::D1_NO_FLIGHT_ITEM_BLOCKS] = "D#1-NO FLIGHT ITEM BLKS";
  m[ErrorResponseException::D1_FIND_ERR] = "D#1-FIND ERR A-06-JFI";
  m[ErrorResponseException::D2_NO_FLIGHT_ITEM_SORT_LIST_BLOCKS] =
      "D#2-NO FLIGHT ITEM SORT LIST BLKS";
  m[ErrorResponseException::D3_NO_FLIGHT_COMB_BLOCKS] = "D#3-NO FLIGHT COMB BLKS";
  m[ErrorResponseException::D3_INVALID_JRFCT_PARMS] = "D#3-INVLD JRFCT PARMS";
  m[ErrorResponseException::QJRA_TRAN_VECTOR_ERR] = "QJRA-TRAN/VECTOR ERR";
  m[ErrorResponseException::QJRB_TRAN_VECTOR_ERR] = "QJRB-TRAN/VECTOR ERR";
  m[ErrorResponseException::NO_DIRECTS_NONSTOPS] = "NO DIRECTS/NONSTOPS FOR 0";
  m[ErrorResponseException::TOO_MANY_COMBOS] = "TOO MANY COMBINATIONS-USE SEG SEL";
  m[ErrorResponseException::CORPORATE_PRICING_ACTIVE] = "INVALID-CORPORATE PRICING IS ACTIVE";
  m[ErrorResponseException::ALT_CITIES_INVALID_FOR_ARNK] = "ALT CITIES NOT VALID FOR ARNK";
  m[ErrorResponseException::ALT_DATES_INVALID_FOR_ARNK] = "ALT DATES NOT VALID FOR ARNK";
  m[ErrorResponseException::TRIP_DURATION_INVALID_FOR_ARNK] = "TRIP DURATION NOT VALID FOR ARNK";
  m[ErrorResponseException::MAX_CONNECTION_TIME_INVALID_FOR_ARNK] =
      "MAXIMUM CONNECTION TIME NOT VALID FOR ARNK";
  m[ErrorResponseException::MAX_TRAVEL_TIME_INVALID_FOR_ARNK] =
      "MAXIMUM TRAVEL TIME NOT VALID FOR ARNK";
  m[ErrorResponseException::ALT_CITIES_NOT_ALLOWED] = "ALT CITIES CURRENTLY NOT ALLOWED";
  m[ErrorResponseException::INVALID_SEG_NUMBER] =
      "INVALID SEGMENT NUMBER SPECIFIED/SEGMENTS OUT OF SEQUENCE";
  m[ErrorResponseException::INVALID_CITY_AIRPORT_CODE] = "INVALID CITY/AIRPORT CODE";
  m[ErrorResponseException::NEED_SEPARATOR] = "NEED SEPARATOR, *";
  m[ErrorResponseException::SEG_DOES_NOT_MATCH_CITY_AIRPORT] =
      "SEGMENT SPECIFIED DOES NOT MATCH CITY/AIRPORT SPECIFIED";
  m[ErrorResponseException::NO_CITY_AIRPORT_FOR_ALTS] = "CITY/AIRPORT FOR ALTS CANNOT BE FOUND";
  m[ErrorResponseException::ALT_CITIES_AIRPORTS_INVALID_FOR_CONNECT] =
      "ALT CITIES/AIRPORTS NOT VALID FOR CONNECTING CITIES";
  m[ErrorResponseException::ALT_CITY_AIRPORT_AND_MILEAGE_RANGE] =
      "ALT CITY/AIRPORT CODE AND MILEAGE RANGE CANNOT BE COMBINED";
  m[ErrorResponseException::MILEAGE_RANGE_INVALID] = "MILEAGE RANGE INVALID ENTER - 1-150 MILES";
  m[ErrorResponseException::INVALID_ALT_CITY_AIRPORT_CODE] = "INVALID ALT CITY/AIRPORT CODE";
  m[ErrorResponseException::INTERNATIONAL_ALT_CITY_AS_PSEUDO] =
      "INTERNATIONAL ALT CITY NOT PERMITTED FOR PSEUDO";
  m[ErrorResponseException::MAX_ALT_AIRPORT_CITIES_EXCEEDED] =
      "MAXIMUM NUMBER OF ALT AIRPORTS/CITIES PERMITTED IS X";
  m[ErrorResponseException::DUPLICATE_BOARD_OFF_POINT_IN_SEG] =
      "SPECIFY SAME SEGMENT BOARD/OFF POINT ONLY ONCE";
  m[ErrorResponseException::SPECIFY_SEGS_FOR_NONCONSECUTIVE_ALT_DATES] =
      "MUST SPECIFY SEGMENTS FOR NONCONSECUTIVE ALT DATES";
  m[ErrorResponseException::INCLUDE_CONNECTING_SEGS] =
      "INVALID ENTRY - MUST INCLUDE CONNECTING SEGMENTS";
  m[ErrorResponseException::INVALID_NUMBER_FOR_ALT_DATES] =
      "NUMBER ENTERED FOR ALT DATES IS INVALID - ENTER 1-3";
  m[ErrorResponseException::COMBINED_CONSEC_NONCONSEC_ALT_DATES] =
      "CONSECUTIVE/NONCONSECUTIVE ALT DATES CANNOT BE COMBINED";
  m[ErrorResponseException::INVALID_DATE_ENTRY_FOR_ALT_TRAVEL_DATES] =
      "INVALID DATE ENTRY FOR ALT TRAVEL DATES - ENTER DDMMM";
  m[ErrorResponseException::MAX_NUMBER_ALT_TRAVEL_DATES_EXCEEDED] =
      "MAXIMUM NUMBER PERMITTED FOR ALT TRAVEL DATES IS 6";
  m[ErrorResponseException::DURATION_ONLY_VALID_FOR_ALT_DATES] =
      "TRIP DURATION ONLY VALID WITH ALT TRAVEL DATES";
  m[ErrorResponseException::DURATION_ONLY_VALID_FOR_CONSEC_ALT_DATES] =
      "TRIP DURATION VALID WITH CONSECUTIVE ALT TVL DATES ONLY";
  m[ErrorResponseException::DURATION_IS_INVALID] = "TRIP DURATION IS INVALID ENTER 0-3";
  m[ErrorResponseException::DURATION_ONLY_VALID_FOR_CONSEC_STOPOVERS] =
      "TRIP DURATION VALID FOR CONSECUTIVE STOPOVERS ONLY";
  m[ErrorResponseException::MAX_CONNECTION_TIME_EXCEEDED] =
      "MAXIMUM CONNECTION TIME IS INVALID ENTER 1-24";
  m[ErrorResponseException::MAX_TRAVEL_TIME_EXCEEDED] = "MAXIMUM TRAVEL TIME IS INVALID ENTER 1-48";
  m[ErrorResponseException::PRIOR_DATE_DEPART_NOT_CHECKED] =
      "ARVL RQST - PRIOR DATE DEPARTURE NOT CHECKED";
  m[ErrorResponseException::NO_PRIVATE_FARES_VALID_FOR_PASSENGER] =
      "NO PRIVATE FARES VALID FOR PASSENGER TYPE/CLASS OF SERVICE";
  m[ErrorResponseException::NO_PUBLIC_FARES_VALID_FOR_PASSENGER] =
      "NO PUBLIC FARES VALID FOR PASSENGER TYPE/CLASS OF SERVICE";
  m[ErrorResponseException::T_NOT_AVAILABLE_IN_V2] = " T/ - CURRENTLY IS NOT AVAILABLE IN V2";
  m[ErrorResponseException::PAXTYPE_NOT_ALLOWED_WITH_FARE_TYPE_PRICING] =
      "SPECIFIED PASSENGER TYPE NOT ALLOWED WITH FARE TYPE PRICING";
  m[ErrorResponseException::XC_QUALIFIER_NOT_AVAILABLE_IN_V2] = " XC QUALIFIER NOT AVAILABLE IN V2";
  m[ErrorResponseException::NO_CORPORATE_NEG_FARES_EXISTS] =
      "REPRICE - NO CORPORATE NEGOTIATED FARES EXIST";
  m[ErrorResponseException::NO_RETAILER_RULE_QUALIFIER_FARES_EXISTS] =
      "NO RETAILER RULE QUALIFIER FARES EXIST";
  m[ErrorResponseException::EMPTY_ALT_DATES_PAIRS_MAP] = "EMPTY ALTERNATE DATES PAIRS MAP";
  m[ErrorResponseException::UNABLE_SETUP_LOW_PRIORITY_PROCESSING] =
      "UNABLE TO SETUP LOW PRIORITY PROCESSING";
  m[ErrorResponseException::NO_VALID_BRAND_FOUND] = "NO VALID BRANDS FOUND";
  m[ErrorResponseException::REQUESTED_BRANDS_INVALID_FOR_TRIP] = "REQUESTED BRANDS INVALID FOR TRIP";

  //
  // New errors start at 7000
  //
  m[ErrorResponseException::NETWORK_EXCEPTION] = "NETWORK EXCEPTION";
  m[ErrorResponseException::MEMORY_EXCEPTION] = "MEMORY EXCEPTION";
  m[ErrorResponseException::DCA_CORBA_EXCEPTION] = "DCA CORBA EXCEPTION";
  m[ErrorResponseException::DB_CURSOR_OPEN_ERROR] = "DB CURSOR OPEN ERROR";
  m[ErrorResponseException::DB_CURSOR_FETCH_ERROR] = "DB CURSOR FETCH ERROR";
  m[ErrorResponseException::DB_CURSOR_CLOSE_ERROR] = "DB CURSOR CLOSE ERROR";
  m[ErrorResponseException::DB_INSERT_ERROR] = "DB INSERT ERROR";
  m[ErrorResponseException::DB_UPDATE_ERROR] = "DB UPDATE ERROR";
  m[ErrorResponseException::DB_SELECT_ERROR] = "DB SELECT ERROR";
  m[ErrorResponseException::DB_BEGIN_WORK_ERROR] = "DB BEGIN WORK ERROR";
  m[ErrorResponseException::DB_COMMIT_WORK_ERROR] = "DB COMMIT WORK ERROR";
  m[ErrorResponseException::DB_TIMEOUT_ERROR] = "WORLDFARE AT PEAK USE";

  //
  // Salesguide errors start at 8000
  //
  m[ErrorResponseException::SSG_FILE_OPEN_ERROR] = "SSG FILE OPEN ERROR";
  m[ErrorResponseException::SSG_DATABASE_ERROR] = "SSG DATABASE ERROR";
  m[ErrorResponseException::SSG_RECORD_ID_ERROR] = "SSG RECORD ID ERROR";
  m[ErrorResponseException::SSG_PROCESSING_STARTED] = "SSG PROCESSING STARTED";
  m[ErrorResponseException::SSG_PROCESSING_COMPLETED] = "SSG PROCESSING COMPLETED";
  m[ErrorResponseException::CNP_PROCESSING_COMPLETED_EOF] = "CNP PROCESSING COMPLETED EOF";
  m[ErrorResponseException::EQP_PROCESSING_FILE_NUMBER] = "EQP PROCESSING FILE NUMBER";
  m[ErrorResponseException::CNP_DELETE_OLD_FAILED] = "CNP DELETE OLD FAILED";
  m[ErrorResponseException::SSG_DELETE_FAILED] = "SSG DELETE FAILED";
  m[ErrorResponseException::SSG_ITEM_DELETED] = "SSG ITEM DELETED";
  m[ErrorResponseException::SSG_UPDATE_FAILED] = "SSG UPDATE FAILED";
  m[ErrorResponseException::SSG_ITEM_UPDATED] = "SSG ITEM UPDATED";
  m[ErrorResponseException::SSG_ADD_FAILED] = "SSG ADD FAILED";
  m[ErrorResponseException::SSG_ITEM_ADDED] = "SSG ITEM ADDED";
  m[ErrorResponseException::SSG_DUPLICATE_FOUND] = "SSG DUPLICATE FOUND";
  m[ErrorResponseException::SSG_SYSTEM_SUSPENDED] = "SSG SYSTEM SUSPENDED";
  m[ErrorResponseException::SSG_PROCESSING_RESTARTED] = "SSG PROCESSING RESTARTED";
  m[ErrorResponseException::SSG_INPUT_FILE_MISSING] = "SSG INPUT FILE MISSING";
  m[ErrorResponseException::CNP_PROCESSING_COMPLETED_NEF] = "CNP PROCESSING COMPLETED NEF";
  m[ErrorResponseException::SSG_CHECKPOINT_FAILED] = "SSG CHECKPOINT FAILED";
  m[ErrorResponseException::SSG_MCT_MCTREGIONS_SQL_ERROR] = "SSG MCT MCTREGIONS SQL ERROR";
  m[ErrorResponseException::SSG_MCT_SYSTEMPARAMETERS_SQL_ERROR] =
      "SSG MCT SYSTEMPARAMETERS SQL ERROR";
  m[ErrorResponseException::SSG_MCT_MINIMUMCONNECTTIME_SQL_ERROR] =
      "SSG MCT MINIMUMCONNECTTIME SQL ERROR";
  m[ErrorResponseException::SSG_MCT_INVALID_ENTRY_CODE] = "SSG MCT INVALID ENTRY CODE";
  m[ErrorResponseException::SSG_MCT_INVALID_ACTION_CODE] = "SSG MCT INVALID ACTION CODE";
  m[ErrorResponseException::SSG_MCT_FILES_SWITCHED] = "SSG MCT FILES SWITCHED";
  m[ErrorResponseException::SSG_MCT_FILES_NOT_SWITCHED] = "SSG MCT FILES NOT SWITCHED";
  m[ErrorResponseException::SSG_MCT_SWITCH_ERROR] = "SSG MCT SWITCH ERROR";
  m[ErrorResponseException::SSG_MCT_CACHE_NOTIFY_ERROR] = "SSG MCT CACHE NOTIFY ERROR";
  m[ErrorResponseException::SSG_MCT_MVS_LOAD_STARTED] = "SSG MCT MVS LOAD STARTED";
  m[ErrorResponseException::SSG_MCT_MVS_LOAD_COMPLETE] = "SSG MCT MVS LOAD COMPLETE";
  m[ErrorResponseException::SSG_MCT_MVS_LOAD_ERROR] = "SSG MCT MVS LOAD ERROR";
  m[ErrorResponseException::SSG_MCT_MVSFILE_LOADER_SUSPENDED] = "SSG MCT MVSFILE LOADER SUSPENDED";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_LOAD_STARTED] = "SSG SCHEDULE BATCH LOAD STARTED";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_LOAD_START_FAILED] =
      "SSG SCHEDULE BATCH LOAD START FAILED";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_LOAD_FAILED] = "SSG SCHEDULE BATCH LOAD FAILED";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_LOAD_COMPLETED] =
      "SSG SCHEDULE BATCH LOAD COMPLETED";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_FILE_FORMAT_ERROR] =
      "SSG SCHEDULE BATCH FILE FORMAT ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_BATCH_PROCESSING_ERROR] =
      "SSG SCHEDULE BATCH PROCESSING ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_INVALID_ARGS_ERROR] = "SSG SCHEDULE INVALID ARGS ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_APPLICATION_INIT_ERROR] =
      "SSG SCHEDULE APPLICATION INIT ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_APPLICATION_LOGIC_ERROR] =
      "SSG SCHEDULE APPLICATION LOGIC ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_PROCESS_RECORD0_STARTED] =
      "SSG SCHEDULE PROCESS RECORD0 STARTED";
  m[ErrorResponseException::SSG_SCHEDULE_PROCESS_RECORD0_COMPLETED] =
      "SSG SCHEDULE PROCESS RECORD0 COMPLETED";
  m[ErrorResponseException::SSG_SCHEDULE_PROCESS_RECORD0_FAILED] =
      "SSG SCHEDULE PROCESS RECORD0 FAILED";
  m[ErrorResponseException::SSG_SCHEDULE_TAPE_NOT_LOADED_ERROR] =
      "SSG SCHEDULE TAPE NOT LOADED ERROR";
  m[ErrorResponseException::SSG_SCHEDULE_DYNAMIC_UPDATE_ERROR] =
      "SSG SCHEDULE DYNAMIC UPDATE ERROR";
  m[ErrorResponseException::SSG_QUERY_CHECKPOINT_FAILED] = "SSG QUERY CHECKPOINT FAILED";
  m[ErrorResponseException::SSG_UPDATE_CHECKPOINT_FAILED] = "SSG UPDATE CHECKPOINT FAILED";
  //
  // Bankers Selling Rate (BSR) errors start at 8501
  //
  m[ErrorResponseException::BSR_INVALID_DATA] = "BSR INVALID DATA";
  m[ErrorResponseException::BSR_PROCESSING_START] = "BSR PROCESSING START";
  m[ErrorResponseException::BSR_ACTION_CODE] = "BSR ACTION CODE";
  m[ErrorResponseException::BSR_PROCESSING_END] = "BSR PROCESSING END";
  m[ErrorResponseException::BSR_EMU_NATION_IGNORED] = "BSR EMU NATION IGNORED";
  m[ErrorResponseException::BSR_DB_ERROR] = "BSR DB ERROR";

  // Cat31 reissue exceptions
  m[ErrorResponseException::UNABLE_TO_MATCH_FARE] = "UNABLE TO MATCH FARES";
  m[ErrorResponseException::UNABLE_TO_MATCH_REISSUE_RULES] =
      "UNABLE TO REPRICE - VOLUNTARY CHANGE RULES UNAVAILABLE";
  m[ErrorResponseException::REISSUE_RULES_FAIL] =
      "UNABLE TO REPRICE - VOLUNTARY CHANGE RULES FAILED";
  m[ErrorResponseException::NUMBER_OF_REISSUES_RESTRICTED] =
      "UNABLE TO REPRICE - NUMBER OF REISSUES RESTRICTED";
  m[ErrorResponseException::BASE_CAT31_NO_LONGER_SUPPORTED] =
      "BASE CAT31 NO LONGER SUPPORTED - USE REISSUE VS EXCHANGE";

  // Cat33 refund exceptions
  // m[ ErrorResponseException::UNABLE_TO_MATCH_FARE   ] = "UNABLE TO MATCH FARES"; - same as Cat31
  m[ErrorResponseException::UNABLE_TO_MATCH_REFUND_RULES] =
      "UNABLE TO REFUND - VOLUNTARY REFUND RULES UNAVAILABLE";
  m[ErrorResponseException::REFUND_RULES_FAIL] = "UNABLE TO REFUND - VOLUNTARY REFUND RULES FAILED";

  m[ErrorResponseException::NOT_IN_TBL] = "NOT IN TBL";

  m[ErrorResponseException::FARE_CURRENCY_OVERRIDE_NOT_VALID] = "CURRENCY OVERRIDE NOT VALID";
  m[ErrorResponseException::ATAE_RETURNED_NO_BOOKING_CODES] =
      "AVAILABILITY SERVICE RETURNED NO BOOKING CODES";
  m[ErrorResponseException::SOLD_OUT] = "SOLD OUT";
  m[ErrorResponseException::INVALID_SEGMENT] = "INVALID_SEGMENT";
  m[ErrorResponseException::BRANDING_SERVICE_INVALID_RESPONSE] = "INVALID BRANDING SERVICE RESPONSE";
  m[ErrorResponseException::RESTRICTED_CURRENCY] = "RESTRICTED CURRENCY";
  m[ErrorResponseException::AGENT_CURRENCY_CODE_MISSING] = "AGENT CURRENCY CODE MISSING";
  m[ErrorResponseException::AGENT_PCC_NON_EXISTENT] = "AGENT PCC NON EXISTENT";
  m[ErrorResponseException::INVALID_GLOBAL_DIRECTION_REQUESTED] =
      "INVALID GLOBAL DIRECTION REQUESTED ";
  m[ErrorResponseException::FAILED_TO_CONNECT_RULE_TEXT_SERVER] =
      "FAILED TO CONNECT RULE TEXT SERVER ";
  m[ErrorResponseException::INVALID_CORP_ID] = "INVALID CORPORATE ID";
  m[ErrorResponseException::INVALID_CURRENCY_CODE_REQUESTED] = "INVALID CURRENCY CODE REQUESTED";
  m[ErrorResponseException::FLIGHTS_CONTINUITY] = "$FLT$  CHK DATE/TIME CONTINUITY OF FLTS";

  //
  // SAX Parser failures
  m[ErrorResponseException::SAX_PARSER_FAILURE] = "PARSE FAILURE - INVALID REQUEST";

  //
  // Limitiation errors start at 9501
  m[ErrorResponseException::LMT_ISSUE_SEP_TKTS_EXCEED_NUM_DEPT_ARR] =
      "ISSUE SEPARATE TKTS - MORE THAN 3 ARR/DEP IN";
  m[ErrorResponseException::LMT_ISSUE_SEP_TKTS_INTL_SURFACE_RESTR] =
      "ISSUE SEPARATE TICKETS-INTL SURFACE RESTRICTED";

  //
  // Ancillary timeout exceptions
  m[ErrorResponseException::ANCILLARY_TIME_OUT_M70] = "ANCILLARY PROCESS TIMEOUT";

  //
  // OB FEES timeout exceptions
  m[ErrorResponseException::OB_FEES_TIME_OUT] = "OB FEES PROCESS TIMEOUT";

  // All system related exceptions like std::bad_aloc etc
  // can be passed as unknow exception
  m[ErrorResponseException::UNKNOWN_EXCEPTION] = "UNKNOWN EXCEPTION";
  m[ErrorResponseException::SYSTEM_EXCEPTION] = "SYSTEM EXCEPTION";

  return m;
}
}

boost::mutex ErrorResponseException::_mapMutex;
std::map<ErrorResponseException::ErrorResponseCode, std::string>
ErrorResponseException::_msgMap(getErrorMessageMap());

ErrorResponseException::ErrorResponseException(ErrorResponseCode code, const std::string& msg)
  : ErrorResponseException(code, msg.c_str())
{
}

ErrorResponseException::ErrorResponseException(ErrorResponseCode code, const char* msg)
  : _code(code)
{
  if (msg != nullptr)
  {
    _message = msg;
  }
  else
  {
    _message =  _msgMap[code];
  }
}

ErrorResponseException&
ErrorResponseException::
operator=(const ErrorResponseException& rhs)
{
  if (this == &rhs)
    return *this;

  _code = rhs._code;
  _message = rhs._message;

  return *this;
}
}
