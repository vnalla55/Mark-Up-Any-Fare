#!/bin/sh
# vim: filetype=tcl
#\
exec wish "$0" -- ${1+"$@"}

package require Expect

# Options array
set opts(host) "localhost"
set opts(port) "61000"
set opts(cxn) "ior"
set opts(iorfile) "$env(HOME)/tseserver.ior"
set opts(async) 0
set opts(printresp) "no"
set opts(printreq) 0
set opts(storeresp) 0
set opts(checkresp) 0
set opts(duplicates) 1
set opts(pricing) 0
set opts(xmlfiles) ""

set hammerCmd "/opt/atseintl/Shopping/hammer/hammer.pl"
set cmdArgs ""
set hammerPid 0
set hammerId 0

set settingsFile "$env(HOME)/.tkHammerrc"
set termCheckIntvl 2000

option add *Button*padX 2
option add *Button*padY 0
#option add *borderWidth 1

# Setup the options frames

frame .xml -borderwidth 2 -relief groove
pack .xml -side top -fill x -expand 0 -padx 5 -pady 2
label .xml.lXml -text "XML File(s):"
entry .xml.eXml -textvariable opts(xmlfiles) -width 60
button .xml.bXml -text "..." -command {
    global savedXmlDir env
    if {$savedXmlDir == ""} {
        set savedXmlDir $env(HOME)
    }
    set filename [tk_getOpenFile -title "Specify XML File" \
        -filetypes {{{XML Files} {*.xml}} {{All Files} {*.*}}} -initialdir \
            $savedXmlDir]
    if {$filename != ""} {
        .xml.eXml insert end " $filename"
        set savedXmlDir [file dirname $filename]
    }
}
checkbutton .xml.cPricing -text "Non-Shopping Requests" -variable opts(pricing)
grid .xml.lXml .xml.eXml .xml.bXml -padx 2 -pady 2 -sticky ew
grid x .xml.cPricing -padx 2 -pady 2 -sticky w

frame .opt1 -borderwidth 2 -relief groove
pack .opt1 -side top -fill x -expand 0 -padx 5 -pady 2
radiobutton .opt1.hp -text "" -variable opts(cxn) -value "hp"
label .opt1.lHost -text "Host:"
bind .opt1.lHost <Button-1> { set opts(cxn) "hp" }
entry .opt1.eHost -textvariable opts(host)
bind .opt1.eHost <Button-1> { set opts(cxn) "hp" }
label .opt1.lPort -text "Port:"
bind .opt1.lPort <Button-1> { set opts(cxn) "hp" }
entry .opt1.ePort -textvariable opts(port) -width 5
bind .opt1.ePort <Button-1> { set opts(cxn) "hp" }
grid .opt1.hp .opt1.lHost .opt1.eHost .opt1.lPort .opt1.ePort \
    -padx 2 -pady 2 -sticky ew

radiobutton .opt1.ior -text "" -variable opts(cxn) -value "ior"
label .opt1.lIor -text "IOR File:"
bind .opt1.lIor <Button-1> { set opts(cxn) "ior" }
entry .opt1.eIor -textvariable opts(iorfile) -width 30
bind .opt1.eIor <Button-1> { set opts(cxn) "ior" }
button .opt1.bIor -text "..." -command {
    global savedIorDir env
    if {$savedIorDir == ""} {
        set savedIorDir $env(HOME)
    }
    set filename [tk_getOpenFile -title "Specify IOR File" \
        -filetypes {{{IOR Files} {*.ior}} {{All Files} {*.*}}} -initialdir \
            $savedIorDir]
    if {$filename != ""} {
        .opt1.eIor delete 0 end
        .opt1.eIor insert end "$filename"
        set savedIorDir [file dirname $filename]
    }
}
grid .opt1.ior .opt1.lIor .opt1.eIor - - .opt1.bIor \
    -padx 2 -pady 2 -sticky ew

frame .opt2 -borderwidth 2 -relief groove
pack .opt2 -side top -fill x -expand 0 -padx 5 -pady 2
label .opt2.lDup -text "Duplicates:"
entry .opt2.eDup -width 5 -textvariable opts(duplicates)
pack .opt2.lDup .opt2.eDup -side left -padx 2 -pady 2

frame .opt4 -borderwidth 2 -relief groove
pack .opt4 -side top -fill x -expand 0 -padx 5 -pady 2
label .opt4.lPrint -text "Response Printing:"
radiobutton .opt4.rPrint -text "Print" -variable opts(printresp) \
    -value "yes"
radiobutton .opt4.rPPrint -text "Pretty Print" -variable opts(printresp) \
    -value "pretty"
radiobutton .opt4.rNoPrint -text "Off" -variable opts(printresp) \
    -value "no"
pack .opt4.lPrint .opt4.rPrint .opt4.rPPrint .opt4.rNoPrint -side left \
    -padx 2 -pady 2

frame .opt5 -borderwidth 2 -relief groove
pack .opt5 -side top -fill x -expand 0 -padx 5 -pady 2
checkbutton .opt5.cAsync -text "Asynchronous" -variable opts(async)
checkbutton .opt5.cPrintReq -text "Print Request" -variable opts(printreq)
checkbutton .opt5.cStoreResp -text "Store Response" -variable opts(storeresp)
checkbutton .opt5.cChkResp -text "Check Response" -variable opts(checkresp)
grid .opt5.cAsync .opt5.cPrintReq .opt5.cStoreResp .opt5.cChkResp -padx 2 -pady 2 -sticky w

# Setup the output frame
frame .output -borderwidth 2 -relief groove
pack .output -side top -fill both -expand 1 -padx 5 -pady 2
text  .output.text -width 80 -height 12 -yscrollcommand {.output.scroll set} \
    -background white -foreground black -state disabled
pack .output.text -side left -fill both -expand 1 -padx 0 -pady 2
scrollbar .output.scroll -command {.output.text yview}
pack .output.scroll -side right -fill y -expand 0 -padx 0 -pady 2
bind .output.text <Button-3> [list tk_popup .outputPopup %X %Y]

# Setup the button frame
frame .buttons -borderwidth 2 -relief groove
pack .buttons -side bottom -fill x -expand 0 -padx 5 -pady 2
button .buttons.exe -text "Execute" -command "Execute"
button .buttons.stop -text "Stop" -command "Stop"
.buttons.stop configure -state disabled
button .buttons.exit -text "Exit" -command "Exit"
pack .buttons.exe -side left -fill none -expand 0 -padx 5 -pady 5
pack .buttons.stop -side left -fill none -expand 0 -padx 5 -pady 5
pack .buttons.exit -side right -fill none -expand 0 -padx 5 -pady 5

# Create the Output Window popup menu
menu .outputPopup -tearoff false -title "Output Window"
.outputPopup add command -command "ClearText" -label "Clear"
.outputPopup add separator
.outputPopup add command -command "SaveOutputWindowText" -label "Save..."

proc ClearText {} {
    .output.text configure -state normal
    .output.text delete 1.0 end
    .output.text configure -state disabled
}

proc SaveOutputWindowText {} {
    global env

    set file [tk_getSaveFile -initialdir "$env(HOME)" -defaultextension ".txt" \
        -title "Save Output to File" \
        -filetypes { {"Text Files" {*.txt} {}} {"All Files" {*.*} {}} }]

    if {$file != ""} {
        if {[catch {open $file w} fileFd]} {
            tk_messageBox -icon error -message "Could not open \"$file\" for writing."
            return
        }
        puts $fileFd [.output.text get 1.0 end-1c]
        close $fileFd
    }
}

proc Execute {} {
    .buttons.exe configure -state disabled
    .buttons.stop configure -state normal
    BuildcmdArgs
    ExecCmd
}

proc Stop {} {
    global hammerPid
    AppendText "Killing hammer.pl..."
    CloseCmd
    AppendText "done\n"
}

proc CloseCmd {} {
    global hammerId hammerPid

    catch {eval [exec kill $hammerPid]}
    catch {close $hammerId}
    set hammerId 0
    .buttons.exe configure -state normal
    .buttons.stop configure -state disabled
    after cancel [list CheckTermination]
}

proc ExecCmd {} {
    global cmdArgs hammerPid hammerId hammerCmd termCheckIntvl

    log_user 0
    cd [file dirname $hammerCmd]

    AppendText "Spawning: $hammerCmd $cmdArgs\n"
    set hammerPid [eval "spawn $hammerCmd $cmdArgs"]

    if {$hammerPid == 0} {
        tk_messageBox -message "Failed to spawn \"$cmdArgs\"."
        return
    }

    set hammerId [exp_open -i $spawn_id]

    fconfigure $hammerId -buffering none -blocking false
    fileevent $hammerId readable AppendTextBox
    after $termCheckIntvl [list CheckTermination]
}

proc AppendText { txt } {
    set path .output.text

    $path configure -state normal
    $path insert end "$txt"
    set numLines [${path} index end]
    set numLines [lindex [split $numLines {.}] 0]

    set maxLines 3000
    if {[expr $numLines > $maxLines]} {
        ${path} delete 1.0 [expr $numLines - $maxLines + 1].0
    }
    $path configure -state disabled
    $path see end
}

proc AppendTextBox {} {
    global hammerId

    if {[catch {eof $hammerId} error]} {
        #AppendText "hammer.pl has exited.\n"
        CloseCmd
        return
    }

    if {[catch {read $hammerId} error]} {
        #AppendText "Read error from hammer.pl: $error\n"
        CloseCmd
        return
    }

    AppendText $error

    if {[catch {eof $hammerId}]} {
        #AppendText "hammer.pl has exited.\n"
        CloseCmd
        return
    }
}

proc BuildcmdArgs {} {
    global opts cmdArgs

    set cmdArgs ""

    if {$opts(cxn) == "hp"} {
        append cmdArgs " --host $opts(host) --port $opts(port)"
    } else {
        append cmdArgs " --ior $opts(iorfile)"
    }

    if {$opts(async) != 0} {
        append cmdArgs " --async"
    }
    switch $opts(printresp) {
        yes { append cmdArgs " --print" }
        no { append cmdArgs " --silent" }
        pretty { append cmdArgs " --prettyprint" }
    }
    if {$opts(printreq) != 0} {
        append cmdArgs " --printrequest"
    }
    if {$opts(storeresp) != 0} {
        append cmdArgs " --store"
    }
    if {$opts(checkresp) != 0} {
        append cmdArgs " --check"
    }
    if {$opts(pricing) != 0} {
        append cmdArgs " --pricing"
    }
    if {$opts(duplicates) > 1} {
        append cmdArgs " --duplicates $opts(duplicates)"
    }
    set files ""
    foreach file [split $opts(xmlfiles) " "] {
        if {$file != ""} {
            append files [glob -nocomplain $file]
            append files " "
        }
    }
    append cmdArgs " $files"
}

proc Exit {} {
    catch {CloseCmd}
    SaveSettings
    exit 0
}

proc ReadSavedSettings {} {
    global settingsFile opts

    if {[file exists $settingsFile]} {
        if {[catch {source $settingsFile} error]} {
            puts stderr "Error reading settings file: $error"
        }
    }
}

proc SaveSettings {} {
    global opts settingsFile

    if {[catch {open $settingsFile w} fd]} {
        puts stderr "Error: Could not save settings."
        return
    }

    foreach setting [array names opts] {
        puts $fd "set opts($setting) \{$opts($setting)\}"
    }
    close $fd
}

proc CheckTermination {} {
    global hammerPid termCheckIntvl

    if { ![file exists "/proc/${hammerPid}/cwd"] } {
        AppendText "hammer.pl Exited.\n"
        CloseCmd
        return
    }

    after $termCheckIntvl [list CheckTermination]
}


# Try to find out who the user executing this script is
if {[catch {eval exec whoami} user]} {
    if {[info exists env(USER)]} {
        set user "$env(USER)"
    }
}
trap Exit {HUP INT QUIT TERM}
wm protocol . WM_DELETE_WINDOW "Exit"

ReadSavedSettings

set savedIorDir [file dirname $opts(iorfile)]
set savedXmlDir ""
